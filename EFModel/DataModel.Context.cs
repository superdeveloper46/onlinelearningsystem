//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MaterialEntities : DbContext
    {
        public MaterialEntities()
            : base("name=MaterialEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityMaterial> ActivityMaterials { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<CampusPublicSafety> CampusPublicSafeties { get; set; }
        public virtual DbSet<CampusPublicSafetyPoint> CampusPublicSafetyPoints { get; set; }
        public virtual DbSet<CodeDepedency> CodeDepedencies { get; set; }
        public virtual DbSet<CodingProblem> CodingProblems { get; set; }
        public virtual DbSet<CodingProblemHint> CodingProblemHints { get; set; }
        public virtual DbSet<CommunityStandard> CommunityStandards { get; set; }
        public virtual DbSet<ContactInformation> ContactInformations { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseCourseMaterialRequirement> CourseCourseMaterialRequirements { get; set; }
        public virtual DbSet<CourseInstance> CourseInstances { get; set; }
        public virtual DbSet<CourseInstanceActivity> CourseInstanceActivities { get; set; }
        public virtual DbSet<CourseInstanceCodingProblem> CourseInstanceCodingProblems { get; set; }
        public virtual DbSet<CourseInstanceDiscussionBoard> CourseInstanceDiscussionBoards { get; set; }
        public virtual DbSet<CourseInstanceMaterial> CourseInstanceMaterials { get; set; }
        public virtual DbSet<CourseInstancePollGroup> CourseInstancePollGroups { get; set; }
        public virtual DbSet<CourseInstanceSession> CourseInstanceSessions { get; set; }
        public virtual DbSet<CourseMaterialRequirement> CourseMaterialRequirements { get; set; }
        public virtual DbSet<CourseObjective> CourseObjectives { get; set; }
        public virtual DbSet<CoursePolicy> CoursePolicies { get; set; }
        public virtual DbSet<CoursePolicyPoint> CoursePolicyPoints { get; set; }
        public virtual DbSet<CoursePrerequisite> CoursePrerequisites { get; set; }
        public virtual DbSet<CourseRequiredTool> CourseRequiredTools { get; set; }
        public virtual DbSet<CourseSupply> CourseSupplies { get; set; }
        public virtual DbSet<CourseTechnologyRequirement> CourseTechnologyRequirements { get; set; }
        public virtual DbSet<CourseTextbook> CourseTextbooks { get; set; }
        public virtual DbSet<DiscussionBoard> DiscussionBoards { get; set; }
        public virtual DbSet<GradeScale> GradeScales { get; set; }
        public virtual DbSet<GradeScaleGroup> GradeScaleGroups { get; set; }
        public virtual DbSet<GradeWeight> GradeWeights { get; set; }
        public virtual DbSet<GradingPolicy> GradingPolicies { get; set; }
        public virtual DbSet<GroupDiscussion> GroupDiscussions { get; set; }
        public virtual DbSet<InstructionMethod> InstructionMethods { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<InstructorCourse> InstructorCourses { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleObjective> ModuleObjectives { get; set; }
        public virtual DbSet<Netiquette> Netiquettes { get; set; }
        public virtual DbSet<NetiquetteLink> NetiquetteLinks { get; set; }
        public virtual DbSet<NetiquettePoint> NetiquettePoints { get; set; }
        public virtual DbSet<PollGroup> PollGroups { get; set; }
        public virtual DbSet<PollGroupPollQuestion> PollGroupPollQuestions { get; set; }
        public virtual DbSet<PollParticipantAnswer> PollParticipantAnswers { get; set; }
        public virtual DbSet<PollQuestion> PollQuestions { get; set; }
        public virtual DbSet<PollQuestionOption> PollQuestionOptions { get; set; }
        public virtual DbSet<PollQuestionType> PollQuestionTypes { get; set; }
        public virtual DbSet<Quarter> Quarters { get; set; }
        public virtual DbSet<QuizAnswer> QuizAnswers { get; set; }
        public virtual DbSet<QuizHint> QuizHints { get; set; }
        public virtual DbSet<QuizQuestion> QuizQuestions { get; set; }
        public virtual DbSet<QuizQuestionAnswer> QuizQuestionAnswers { get; set; }
        public virtual DbSet<QuizQuestionChoice> QuizQuestionChoices { get; set; }
        public virtual DbSet<QuizQuestionElementStyle> QuizQuestionElementStyles { get; set; }
        public virtual DbSet<QuizQuestionImage> QuizQuestionImages { get; set; }
        public virtual DbSet<QuizQuestionRating> QuizQuestionRatings { get; set; }
        public virtual DbSet<RequestLogin> RequestLogins { get; set; }
        public virtual DbSet<RequiredTool> RequiredTools { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<ResourceSchool> ResourceSchools { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentCourseAccess> StudentCourseAccesses { get; set; }
        public virtual DbSet<StudentGradable> StudentGradables { get; set; }
        public virtual DbSet<StudentLogin> StudentLogins { get; set; }
        public virtual DbSet<StudentMaterial> StudentMaterials { get; set; }
        public virtual DbSet<StudentQuizQuestion> StudentQuizQuestions { get; set; }
        public virtual DbSet<Submission> Submissions { get; set; }
        public virtual DbSet<Supply> Supplies { get; set; }
        public virtual DbSet<SupportService> SupportServices { get; set; }
        public virtual DbSet<SupportTicket> SupportTickets { get; set; }
        public virtual DbSet<SupportTicketMessage> SupportTicketMessages { get; set; }
        public virtual DbSet<TechnologyRequirement> TechnologyRequirements { get; set; }
        public virtual DbSet<Textbook> Textbooks { get; set; }
        public virtual DbSet<UnhandledError> UnhandledErrors { get; set; }
        public virtual DbSet<ActivityGrade> ActivityGrades { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<CodeError> CodeErrors { get; set; }
        public virtual DbSet<CodeHint> CodeHints { get; set; }
        public virtual DbSet<ErrorParsing> ErrorParsings { get; set; }
        public virtual DbSet<SanitizedCodeError> SanitizedCodeErrors { get; set; }
        public virtual DbSet<SanitizedCodeErrorCodeHint> SanitizedCodeErrorCodeHints { get; set; }
        public virtual DbSet<StudentCourseInstanceCompletion> StudentCourseInstanceCompletions { get; set; }
        public virtual DbSet<SubmissionCodeError> SubmissionCodeErrors { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<CodingProblemInstance> CodingProblemInstances { get; set; }
        public virtual DbSet<VariableValue> VariableValues { get; set; }
        public virtual DbSet<InstructorAvailableHour> InstructorAvailableHours { get; set; }
        public virtual DbSet<NonAcademicDay> NonAcademicDays { get; set; }
        public virtual DbSet<TestTemplate> TestTemplates { get; set; }
        public virtual DbSet<VideoMaterial> VideoMaterials { get; set; }
        public virtual DbSet<VideoMaterialStep> VideoMaterialSteps { get; set; }
        public virtual DbSet<CourseCorequisite> CourseCorequisites { get; set; }
        public virtual DbSet<StudentSupportResource> StudentSupportResources { get; set; }
        public virtual DbSet<CourseInstructionMethod> CourseInstructionMethods { get; set; }
        public virtual DbSet<MethodsOfInstruction> MethodsOfInstructions { get; set; }
    
        public virtual ObjectResult<ActivityInformation_Result> ActivityInformation(Nullable<bool> testStudent, Nullable<int> studentId, Nullable<int> courseInstanceId, Nullable<int> moduleObjectiveId)
        {
            var testStudentParameter = testStudent.HasValue ?
                new ObjectParameter("TestStudent", testStudent) :
                new ObjectParameter("TestStudent", typeof(bool));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            var moduleObjectiveIdParameter = moduleObjectiveId.HasValue ?
                new ObjectParameter("ModuleObjectiveId", moduleObjectiveId) :
                new ObjectParameter("ModuleObjectiveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActivityInformation_Result>("ActivityInformation", testStudentParameter, studentIdParameter, courseInstanceIdParameter, moduleObjectiveIdParameter);
        }
    
        public virtual ObjectResult<ActivityInformation1_Result> ActivityInformation1(Nullable<bool> testStudent, Nullable<int> studentId, Nullable<int> courseInstanceId, Nullable<int> moduleObjectiveId)
        {
            var testStudentParameter = testStudent.HasValue ?
                new ObjectParameter("TestStudent", testStudent) :
                new ObjectParameter("TestStudent", typeof(bool));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            var moduleObjectiveIdParameter = moduleObjectiveId.HasValue ?
                new ObjectParameter("ModuleObjectiveId", moduleObjectiveId) :
                new ObjectParameter("ModuleObjectiveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActivityInformation1_Result>("ActivityInformation1", testStudentParameter, studentIdParameter, courseInstanceIdParameter, moduleObjectiveIdParameter);
        }
    
        public virtual ObjectResult<CalendarData_Result> CalendarData(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalendarData_Result>("CalendarData", studentIdParameter);
        }
    
        public virtual ObjectResult<CourseCompletionSummary_Result> CourseCompletionSummary(Nullable<bool> testStudent, Nullable<int> studentId, Nullable<int> courseInstanceId)
        {
            var testStudentParameter = testStudent.HasValue ?
                new ObjectParameter("TestStudent", testStudent) :
                new ObjectParameter("TestStudent", typeof(bool));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseCompletionSummary_Result>("CourseCompletionSummary", testStudentParameter, studentIdParameter, courseInstanceIdParameter);
        }
    
        public virtual ObjectResult<CourseGrade_Result> CourseGrade(Nullable<int> studentId, Nullable<int> courseInstanceId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGrade_Result>("CourseGrade", studentIdParameter, courseInstanceIdParameter);
        }
    
        public virtual ObjectResult<CourseGradeCurrent_Result> CourseGradeCurrent(Nullable<int> studentId, Nullable<int> courseInstanceId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGradeCurrent_Result>("CourseGradeCurrent", studentIdParameter, courseInstanceIdParameter);
        }
    
        public virtual ObjectResult<ModuleGrade_Result> ModuleGrade(Nullable<int> studentId, Nullable<int> courseInstanceId, Nullable<int> moduleId, Nullable<int> courseObjectiveId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseInstanceIdParameter = courseInstanceId.HasValue ?
                new ObjectParameter("CourseInstanceId", courseInstanceId) :
                new ObjectParameter("CourseInstanceId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var courseObjectiveIdParameter = courseObjectiveId.HasValue ?
                new ObjectParameter("CourseObjectiveId", courseObjectiveId) :
                new ObjectParameter("CourseObjectiveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleGrade_Result>("ModuleGrade", studentIdParameter, courseInstanceIdParameter, moduleIdParameter, courseObjectiveIdParameter);
        }
    
        public virtual ObjectResult<CourseGradeForAllCourseInstance_Result> CourseGradeForAllCourseInstance(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGradeForAllCourseInstance_Result>("CourseGradeForAllCourseInstance", studentIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<TentativeAssignmentSchedule_Result> TentativeAssignmentSchedule(Nullable<int> courseInstanceID)
        {
            var courseInstanceIDParameter = courseInstanceID.HasValue ?
                new ObjectParameter("CourseInstanceID", courseInstanceID) :
                new ObjectParameter("CourseInstanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TentativeAssignmentSchedule_Result>("TentativeAssignmentSchedule", courseInstanceIDParameter);
        }
    }
}
