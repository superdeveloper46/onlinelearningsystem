using EFModel;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using LMSLibrary;
using CompilerFunctions;
using System.Text.RegularExpressions;
using System.Text;
using LMS.Common.ViewModels;
using LMS.Common.Infos;
using System.Net.Http;
using AdminPages.Helpers;

namespace OnlineLearningSystem
{
    public partial class UpdateCodingProblem : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindDropDownCourse();
                BindDropDownCodingProblem();
                BindDropDownListLanguage();
                ViewState["Variables"] = 0;
            }
            renderVariables();
        }
        private void BindDropDownCourse()
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                DropDownListCourseFilter2.DataSource = db.Courses.Select(x => new { x.Id, x.Name }).OrderBy(x => x.Id).ToList();
                DropDownListCourseFilter2.DataTextField = "Name";
                DropDownListCourseFilter2.DataValueField = "Id";
                DropDownListCourseFilter2.DataBind();
                DropDownListCourseFilter2.Items.Insert(0, new ListItem("--Select Course--", ""));
            }
        }
        private void BindDropDownCourseInstance()
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                //---------------Coruse Instance Droup Down list----------------
                DropDownListCourseInstanceFilter.DataSource = db.CourseInstances.Where(ci => ci.Active).Select(x => new { x.Id, x.Course.Name }).OrderBy(x => x.Id).ToList();
                DropDownListCourseInstanceFilter.DataTextField = "Name";
                DropDownListCourseInstanceFilter.DataValueField = "Id";
                DropDownListCourseInstanceFilter.DataBind();
                DropDownListCourseInstanceFilter.Items.Insert(0, new ListItem("--Select Course Instance Filter--", ""));
            }
        }
        private void BindDropDownCodingProblem()
        {

            using (MaterialEntities db = new MaterialEntities())
            {
                var model = db.CodingProblems.Select(x => new { Id = x.Id, Title = x.Title }).ToList();
                //--------------- Droup Down list----------------
                DropDownListCodingProblem.DataSource = model;
                DropDownListCodingProblem.DataTextField = "Title";
                DropDownListCodingProblem.DataValueField = "Id";
                DropDownListCodingProblem.DataBind();
                DropDownListCodingProblem.Items.Insert(0, new ListItem("--Select Coding Problem--", ""));
            }
        }
        private void BindDropDownModuleObjectiveFilter()
        {
            if (DropDownListCourseInstanceFilter.SelectedValue != "")
            {
                using (MaterialEntities db = new MaterialEntities())
                {
                    int courseInstanceId = Convert.ToInt32(DropDownListCourseInstanceFilter.SelectedValue);
                    int courseId = db.CourseInstances.Find(courseInstanceId).CourseId;
                    var modelObjectives = (from a in db.ModuleObjectives.Where(x => x.Active && x.Modules.Where(m => m.Active && m.CourseObjectives.Where(co => co.Active && co.Courses.Where(c => c.Id == courseId).Any()).Any()).Any())
                                           select new { Id = a.Id, Title = a.Description }).OrderBy(y => y.Id).ToList();
                    //--------------------Bind Dropdown--------------------------
                    DropDownListModuleObjectiveFilter.DataSource = modelObjectives;
                    DropDownListModuleObjectiveFilter.DataTextField = "Title";
                    DropDownListModuleObjectiveFilter.DataValueField = "Id";
                    DropDownListModuleObjectiveFilter.DataBind();
                    DropDownListModuleObjectiveFilter.Items.Insert(0, new ListItem("--Select Module--", ""));
                }
            }
        }
        private void crearText()
        {
            //TextBoxParameterValues.Text = "";
            TextBoxExpectedOutput.Text = "";
        }
        protected void btnCodingProblemListPage_Click(object sender, EventArgs e)
        {
            Page.ClientScript.RegisterStartupScript(GetType(), "OpenWindow", "window.open('QuizQuestionList.aspx','_newtab');", true);
        }
        private void clearAll()
        {
            DropDownListCourseFilter2.SelectedIndex = -1;
            DropDownListQuarterFilter2.Items.Clear();
            DropDownListCourseInstanceFilter.Items.Clear();

            //CheckBoxAutoGenerated.Checked = false;
            //CheckBoxOutPutException.Checked = false;

            //DropDownListCodingProblem.SelectedIndex = -1;
            BindDropDownCodingProblem();
            EditorInstruction.Value = "";
            TextBoxScript.Text = "";
            TextBoxSolution.Text = "";
            //TextBoxClassName.Text = "";
            //TextBoxMethodName.Text = "";
            //TextBoxParameterTypes.Text = "";
            //TextBoxLanguage.Text = "";
            DropDownListLanguage.SelectedIndex = -1;
            TextBoxTestCaseClass.Text = "";
            TextBoxBefore.Text = "";
            TextBoxAfter.Text = "";

            TextBoxMaxGrade.Text = "100";
            TextBoxTitle.Text = "";
            //TextBoxType.Text = "";
            lblType.Text = "";
            TextBoxAttempts.Text = "100";
            //TextBoxRole.Text = "100";
            DropDownListRole.SelectedIndex = -1;

            //TextBoxParameterValues.Text = "";
            TextBoxExpectedOutput.Text = "";
            TextBoxTestCode.Text = "";
            TextBoxTestCodeForStudent.Text = "";
            //TextBoxOutputType.Text = "";


            PanelExcelFile.Visible = false;
            PanelCodeInstance.Visible = false;
            PanelCodeInstance2.Visible = false;
            PanelTestCase.Visible = false;
            //PanelAddNewTest.Visible = false;
            //PanelTestList.Visible = false;
            PanelLanguage.Visible = false;
            PanelCodingProblem.Visible = false;
            PanelExpectedOutput.Visible = false;

            lblMessage.Text = "";
            lblmessageFile2.Text = "";
            //GridViewTest.DataSource = null;
            //GridViewTest.DataBind();
        }
        protected void btnClearAll_Click(object sender, EventArgs e)
        {
            clearAll();
        }
        protected void btnAssessmentListPage_Click(object sender, EventArgs e)
        {
            Page.ClientScript.RegisterStartupScript(GetType(), "OpenWindow", "window.open('CodingProblemList.aspx','_newtab');", true);
        }

        protected void DropDownListCodingProblem_SelectedIndexChanged(object sender, EventArgs e)
        {
            ErrorCompilation.Visible = false;
            lblMessage.Visible = false;
            btnMessageHelp.Visible = false;
            if (DropDownListCodingProblem.SelectedValue != "")
            {
                using (MaterialEntities db = new MaterialEntities())
                {
                    CodingProblem codingProblem = db.CodingProblems.Find(Convert.ToInt32(DropDownListCodingProblem.SelectedValue));
                    TextBoxTitle.Text = codingProblem.Title;
                    //TextBoxType.Text = codingProblem.Type;
                    lblType.Text = Convert.ToString(codingProblem.Type);
                    TextBoxMaxGrade.Text = Convert.ToString(codingProblem.MaxGrade);
                    //btnAddNewCodingProblem.Attributes["disabled"] = "disabled";
                    EditorInstruction.Value = codingProblem.Instructions;
                    TextBoxScript.Text = codingProblem.Script;
                    TextBoxSolution.Text = codingProblem.Solution;
                    //TextBoxClassName.Text = codingProblem.ClassName;
                    //TextBoxMethodName.Text = codingProblem.MethodName;
                    //TextBoxParameterTypes.Text = codingProblem.ParameterTypes;
                    //TextBoxLanguage.Text = codingProblem.Language;
                    Language language = db.Languages.Where(x => x.Name.ToLower() == codingProblem.Language.ToLower()).FirstOrDefault();
                    if (language != null)
                    {
                        DropDownListLanguage.SelectedValue = Convert.ToString(language.Id);
                    }

                    //TextBoxTestCaseClass.Text = codingProblem.TestCaseClass;
                    TextBoxBefore.Text = codingProblem.Before;
                    TextBoxAfter.Text = codingProblem.After;
                    TextBoxAttempts.Text = Convert.ToString(codingProblem.Attempts);
                    //TextBoxRole.Text = Convert.ToString(codingProblem.Role);
                    DropDownListRole.SelectedValue = Convert.ToString(codingProblem.Role);
                    CheckBoxActive.Checked = codingProblem.Active;
                    TextBoxExpectedOutput.Text = codingProblem.ExpectedOutput;
                    TextBoxTestCode.Text = codingProblem.TestCode;
                    TextBoxTestCodeForStudent.Text = codingProblem.TestCodeForStudent;

                    //TextBoxParameterValues.Text = codingProblem.Parameters;
                    //BindGridTest();
                    //------------------------------------------------
                    VisiblePanel(Convert.ToString(codingProblem.Type));
                    if (codingProblem.Language.ToLower() == "tableau")
                    {
                        PanelExpectedOutput.Visible = true;
                    }

                    for (int j = TableValues.Rows.Count; j > 1; j--)
                    {
                        TableValues.Rows.RemoveAt(j - 1);
                    }

                    IQueryable<VariableValue> variableValue = db.VariableValues.OrderBy(vv => vv.possibleValues).Where(vv => vv.CodingProblemId == codingProblem.Id);

                    var VarValueCollection = variableValue.ToList();

                    VariableValue PrevVarValue = null;
                    bool firstTime = true;

                    if (VarValueCollection.Count > 0)
                    {
                        foreach (var VarValueCollectionItem in VarValueCollection)
                        {
                            if (!firstTime && PrevVarValue.possibleValues == VarValueCollectionItem.possibleValues)
                            {
                                //Find last Row inserted
                                String IdValues = TableValues.Rows[TableValues.Rows.Count - 1].Cells[0].Controls[0].ClientID;
                                TextBox ContentName = (TextBox)TableValues.Rows[TableValues.Rows.Count - 1].Cells[0].FindControl(IdValues);

                                //Concatenate varName
                                ContentName.Text += "," + VarValueCollectionItem.VarName;
                                TableValues.Rows[TableValues.Rows.Count - 1].Cells[0].Controls.Add(ContentName);
                            }
                            else
                            {
                                var lastRow = TableValues.Rows.Count + 1;
                                //New Row
                                TableRow tableRow = new TableRow();
                                tableRow.ID = DropDownListCodingProblem.SelectedValue + lastRow.ToString();

                                tableRow.Style.Add(HtmlTextWriterStyle.BackgroundColor, "white");

                                //Name
                                TableCell cellName = new TableCell();
                                cellName.ID = DropDownListCodingProblem.SelectedValue + "Cell" + lastRow.ToString() + "1";
                                TextBox txName = new TextBox();
                                txName.ID = DropDownListCodingProblem.SelectedValue + "Ctl" + lastRow.ToString() + "1";
                                txName.Text = VarValueCollectionItem.VarName;
                                txName.Attributes.Add("placeholder", "Enter Name");
                                cellName.Controls.Add(txName);

                                //Values
                                TableCell cellValue = new TableCell();
                                cellValue.ID = DropDownListCodingProblem.SelectedValue + "Cell" + lastRow.ToString() + "2";
                                TextBox txValue = new TextBox();
                                txValue.ID = DropDownListCodingProblem.SelectedValue + "Ctl" + lastRow.ToString() + "2";
                                txValue.Text = VarValueCollectionItem.possibleValues;
                                txValue.Attributes.Add("placeholder", "Enter Values");
                                cellValue.Controls.Add(txValue);

                                tableRow.Cells.Add(cellName);
                                tableRow.Cells.Add(cellValue);

                                TableValues.Rows.Add(tableRow);
                            }

                            PrevVarValue = VarValueCollectionItem;
                            firstTime = false;
                        }
                    }
                    else
                    {
                        addRow(2);
                    }
                    ViewState["Variables"] = TableValues.Rows.Count + 1;
                }
            }
        }
        protected void DropDownListCourseInstanceFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            filterCodingProblem();
            BindDropDownModuleObjectiveFilter();
        }
        protected void DropDownListModuleObjectiveFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            filterCodingProblem();
        }
        private void filterCodingProblem()
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                if (DropDownListModuleObjectiveFilter.SelectedValue != "" && DropDownListCourseInstanceFilter.SelectedValue != "")
                {
                    int moduleObjectiveId = Convert.ToInt32(DropDownListModuleObjectiveFilter.SelectedValue);
                    int courseInstanceId = Convert.ToInt32(DropDownListCourseInstanceFilter.SelectedValue);
                    DropDownListCodingProblem.DataSource = db.CourseInstanceCodingProblems.Where(x => x.ModuleObjectiveId == moduleObjectiveId && x.CourseInstanceId == courseInstanceId && x.Active).Select(y => y.CodingProblem).OrderBy(x => x.Id).ToList();
                }
                else if (DropDownListCourseInstanceFilter.SelectedValue != "")
                {
                    int courseInstanceId = Convert.ToInt32(DropDownListCourseInstanceFilter.SelectedValue);
                    DropDownListCodingProblem.DataSource = db.CourseInstanceCodingProblems.Where(x => x.CourseInstanceId == courseInstanceId && x.Active).Select(y => y.CodingProblem).OrderBy(x => x.Id).ToList();
                }
                else if (DropDownListModuleObjectiveFilter.SelectedValue != "")
                {
                    int moduleObjectiveId = Convert.ToInt32(DropDownListModuleObjectiveFilter.SelectedValue);
                    DropDownListCodingProblem.DataSource = db.CourseInstanceCodingProblems.Where(x => x.ModuleObjectiveId == moduleObjectiveId && x.Active).Select(y => y.CodingProblem).OrderBy(x => x.Id).ToList();
                }
                else
                {
                    DropDownListCodingProblem.DataSource = db.CodingProblems.Where(x => x.Active).Select(x => new { Id = x.Id, Title = x.Title }).ToList();
                }

                //--------------- Droup Down list----------------
                DropDownListCodingProblem.DataTextField = "Title";
                DropDownListCodingProblem.DataValueField = "Id";
                DropDownListCodingProblem.DataBind();
                DropDownListCodingProblem.Items.Insert(0, new ListItem("--Select Coding Problem--", ""));
            }
        }

        #region ===============CodingProblem============================================================
        protected void btnUpdateCodingProblem_Click(object sender, EventArgs e)
        {
            if (DropDownListCodingProblem.SelectedValue != "")
            {
                if (CodingProblemValidation()) {
                    using (MaterialEntities db = new MaterialEntities())
                    {
                        //------------------------Coding Problem Table-------------------------------------
                        //int usesHint = -1;
                        //if (CheckboxUsesHint.Checked)
                        //{
                        //    usesHint = 1;
                        //}

                        CodingProblem codingproblemDll = db.CodingProblems.Find(Convert.ToInt32(DropDownListCodingProblem.SelectedValue));                        
                        VmCodingProblem codingproblem = GetCodingProblemVmModel(codingproblemDll);

                        //CodingProblem codingproblem = db.CodingProblems.Find(Convert.ToInt32(DropDownListCodingProblem.SelectedValue));

                        codingproblem.Instructions = EditorInstruction.Value;
                        codingproblem.Script = TextBoxScript.Text.Trim();
                        codingproblem.Solution = TextBoxSolution.Text.Trim();
                        //codingproblem.ClassName = TextBoxClassName.Text.Trim();
                        //codingproblem.MethodName = TextBoxMethodName.Text.Trim();
                        //codingproblem.ParameterTypes = TextBoxParameterTypes.Text.Trim();
                        codingproblem.Language = DropDownListLanguage.SelectedItem.Text;
                        //codingproblem.TestCaseClass = TextBoxTestCaseClass.Text.Trim();
                        codingproblem.Before = TextBoxBefore.Text.Trim();
                        codingproblem.After = TextBoxAfter.Text.Trim();
                        codingproblem.MaxGrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim());
                        codingproblem.Title = TextBoxTitle.Text.Trim();
                        codingproblem.Attempts = Convert.ToInt32(TextBoxAttempts.Text.Trim());
                        codingproblem.Active = CheckBoxActive.Checked;
                        codingproblem.Role = Convert.ToInt32(DropDownListRole.SelectedValue);
                        codingproblem.ExpectedOutput = TextBoxExpectedOutput.Text.Trim();
                        codingproblem.TestCode = TextBoxTestCode.Text.Trim();
                        codingproblem.TestCodeForStudent = TextBoxTestCodeForStudent.Text.Trim();
                        //codingproblem.Parameters = TextBoxParameterValues.Text.Trim();

                        //New for updateCodingProblem
                        List<(string, string)> RowVariables = ReadVariablesInputs();

                        var varNameAux = "";
                        var possiblesValuesAux = "";

                        bool commit = true;

                        lblMessage.Visible = true;
                        btnMessageHelp.Visible = false;
                        ErrorCompilation.Visible = false;
                        btnMessageHelp.ToolTip = "";

                        List<(string,string)> RowVariablesSort = RowVariables;
                        RowVariablesSort.Sort((a, b) => a.Item1.CompareTo(b.Item1));

                        string beforeVal = "";
                        if (RowVariablesSort.Count > 1) {
                            foreach ((string, string) i in RowVariablesSort)
                            {
                                if (beforeVal != "" && beforeVal == i.Item1)
                                {
                                    lblMessage.Text = "Sorry! Variable " + beforeVal + " already exists";
                                    commit = false;
                                    break;
                                }
                                beforeVal = i.Item1;
                            }
                        }

                        if (commit) { 
                            foreach ((string, string) i in RowVariables)
                            {
                                if (i.Item1.Trim() != "" && i.Item2.Trim() != "")
                                {
                                    (bool, string) validateVariable = variableValidation(i);
                                    if (validateVariable.Item1)
                                    {
                                        varNameAux = i.Item1.Trim();
                                        possiblesValuesAux = i.Item2.Trim();
                                        VariableValue varValues = new VariableValue();
                                        
                                        CodingProblem codingproblemModel = GetCodingProblemModel(codingproblem);
                                        varValues = new VariableValue()
                                        {
                                            //CodingProblem = codingproblem,
                                            CodingProblem = codingproblemModel,
                                            VarName = varNameAux,
                                            possibleValues = possiblesValuesAux
                                        };

                                        IQueryable<VariableValue> variableValue = db.VariableValues.Where(vv => vv.CodingProblemId == codingproblem.Id && vv.VarName == varNameAux);
                                        if (!variableValue.Any())
                                        {
                                            db.VariableValues.Add(varValues);
                                        }
                                        else if (variableValue.First().possibleValues != possiblesValuesAux)
                                        {
                                            db.VariableValues.Remove(variableValue.First());
                                            db.VariableValues.Add(varValues);
                                        }
                                    }
                                    else
                                    {
                                        lblMessage.Text = validateVariable.Item2;
                                        commit = false;
                                        break;
                                    }
                                }
                            }
                        }

                        if (commit)
                        {
                            try
                            {
                                IQueryable<VariableValue> variableValueList = db.VariableValues.Where(vv => vv.CodingProblemId == codingproblem.Id);
                                foreach (VariableValue vv in variableValueList)
                                {
                                    if (!RowVariables.Contains((vv.VarName, vv.possibleValues)))
                                    {
                                        db.VariableValues.Remove(vv);
                                    }
                                }
                                //end New for coding problem

                                db.SaveChanges();
                                string languageName = DropDownListLanguage.SelectedItem.Text;
                                bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                                    languageName == "C++" || languageName == "Python" ||
                                                    languageName == "R");

                                btnMessageHelp.ToolTip = "";
                                if (needCompile)
                                {
                                    ExecutionResult compilationResult = compileCodingProblem(codingproblem, RowVariables);
                                    if (!compilationResult.Compiled)
                                    {
                                        lblMessage.Text = "Sorry! Compilation failed. Saved with errors.";
                                        btnMessageHelp.ToolTip = "View details";
                                        TextBoxErrorComp.Text = "";
                                        for (int i = 0; i < compilationResult.Message.Count; i++)
                                        {
                                            TextBoxErrorComp.Text += compilationResult.Message[i] + "\n";
                                        }
                                        string[] stringSeparators = new string[] { "\n" };
                                        string[] lines = compilationResult.allCode.TrimEnd().Split(stringSeparators, StringSplitOptions.None);

                                        string allCode = "";
                                        StringBuilder sb = new StringBuilder();
                                        int j = 1;
                                        foreach (string line in lines)
                                        {
                                            if (line == "")
                                            {
                                                sb.AppendLine();
                                                sb.AppendFormat("{0}: {1}", j, line).AppendLine();
                                            }
                                            else
                                            {
                                                sb.AppendFormat("{0}: {1}", j, line);
                                            }

                                            j++;
                                        }

                                        allCode = sb.ToString();

                                        TextBoxAllCode.Text = allCode;
                                        TextBoxAllCode.Enabled = false;
                                        TextBoxErrorComp.Enabled = false;
                                        ErrorCompilation.Visible = true;
                                        btnMessageHelp.Visible = true;
                                    }
                                    else
                                    {
                                        lblMessage.Text = "Updated Successfully";
                                    }
                                }
                                else
                                {
                                    lblMessage.Text = "Updated Successfully";
                                }
                                BindDropDownCodingProblem();
                                DropDownListCodingProblem.SelectedValue = Convert.ToString(codingproblem.Id);
                            }
                            catch (Exception exc)
                            {
                                lblMessage.Text = "Sorry! " + exc.Message + " Saved with errors.";
                            }

                        }
                    }
                }
            }
            else
            {
                lblMessage.Text = "Please add an Assessment first";
            }
        }
        private VmCodingProblem GetCodingProblemVmModel(CodingProblem cProblem)
        {
            VmCodingProblem codingProblem = new VmCodingProblem();
            codingProblem.Instructions = cProblem.Instructions;
            codingProblem.Script = cProblem.Script;
            codingProblem.Solution = cProblem.Solution;
            codingProblem.ClassName = cProblem.ClassName;
            codingProblem.MethodName = cProblem.MethodName;
            codingProblem.ParameterTypes = cProblem.ParameterTypes;
            codingProblem.Language = cProblem.Language;
            codingProblem.TestCaseClass = cProblem.TestCaseClass;
            codingProblem.Before = cProblem.Before;
            codingProblem.After = cProblem.After;
            codingProblem.MaxGrade = cProblem.MaxGrade;
            codingProblem.Title = cProblem.Title;
            codingProblem.Type = cProblem.Type;
            codingProblem.Attempts = cProblem.Attempts;
            codingProblem.Active = cProblem.Active;
            codingProblem.Role = cProblem.Role;
            codingProblem.Id = cProblem.Id;
            codingProblem.ExpectedOutput = cProblem.ExpectedOutput;
            codingProblem.Parameters = cProblem.Parameters;
            codingProblem.TestCode = cProblem.TestCode;
            codingProblem.TestCodeForStudent = cProblem.TestCodeForStudent;
            //codingProblem.VariableValues = cProblem.VariableValues;
            return codingProblem;
        }
        private CodingProblem GetCodingProblemModel(VmCodingProblem cProblem)
        {
            CodingProblem codingProblem = new CodingProblem();
            codingProblem.Instructions = cProblem.Instructions;
            codingProblem.Script = cProblem.Script;
            codingProblem.Solution = cProblem.Solution;
            codingProblem.ClassName = cProblem.ClassName;
            codingProblem.MethodName = cProblem.MethodName;
            codingProblem.ParameterTypes = cProblem.ParameterTypes;
            codingProblem.Language = cProblem.Language;
            codingProblem.TestCaseClass = cProblem.TestCaseClass;
            codingProblem.Before = cProblem.Before;
            codingProblem.After = cProblem.After;
            codingProblem.MaxGrade = cProblem.MaxGrade;
            codingProblem.Title = cProblem.Title;
            codingProblem.Type = cProblem.Type;
            codingProblem.Attempts = cProblem.Attempts;
            codingProblem.Active = cProblem.Active;
            codingProblem.Role = cProblem.Role;
            codingProblem.Id = cProblem.Id;
            codingProblem.ExpectedOutput = cProblem.ExpectedOutput;
            codingProblem.Parameters = cProblem.Parameters;
            codingProblem.TestCode = cProblem.TestCode;
            codingProblem.TestCodeForStudent = cProblem.TestCodeForStudent;
            //codingProblem.VariableValues = cProblem.VariableValues;
            return codingProblem;
        }

        protected bool CodingProblemValidation()
        {
            bool result = true;
            string fieldName = "";

            if (string.IsNullOrWhiteSpace(DropDownListLanguage.SelectedValue))
            {
                fieldName += " Language -";
                result = false;
            }

            if (string.IsNullOrWhiteSpace(TextBoxMaxGrade.Text))
            {
                fieldName += " Max Grade -";
                result = false;
            }
            if (string.IsNullOrWhiteSpace(TextBoxTitle.Text))
            {
                fieldName += " Title -";
                result = false;
            }

            if (string.IsNullOrWhiteSpace(TextBoxAttempts.Text))
            {
                fieldName += " Attempts -";
                result = false;
            }
            if (string.IsNullOrWhiteSpace(DropDownListRole.SelectedValue))
            {
                fieldName += " Role -";
                result = false;
            }
            string languageName = DropDownListLanguage.SelectedItem.Text;
            bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                languageName == "C++" || languageName == "Python" ||
                                languageName == "R");
            if (needCompile)
            {
                if (string.IsNullOrWhiteSpace(EditorInstruction.Value))
                {
                    fieldName += " Instructions -";
                    result = false;
                }
                if (string.IsNullOrWhiteSpace(TextBoxSolution.Text))
                {
                    fieldName += " Solution -";
                    result = false;
                }
            }
            if (!result)
            {
                result = false;
                lblMessage.Text = "Sorry! Operation has been failed. Required Fields: " + fieldName + ".";
            }
            return result;
        }
        //protected void btnUploadFile_Click(object sender, EventArgs e)
        //{
        //    string result;
        //    if (FileUpload1.HasFile)
        //    {
        //        try
        //        {
        //            string appPath = HttpRuntime.AppDomainAppPath + @"Temp\\";
        //            FileUpload1.SaveAs(appPath + FileUpload1.FileName);
        //            string answer = File.ReadAllText(appPath + FileUpload1.FileName);
        //            byte[] byteArr = File.ReadAllBytes(appPath + FileUpload1.FileName);
        //            string solutionBase64 = Convert.ToBase64String(byteArr, 0, byteArr.Length, Base64FormattingOptions.None);
        //            File.Delete(appPath + FileUpload1.FileName);
        //            TextBoxSolution.Text = solutionBase64;
        //            result = "solution file was uploaded";
        //        }
        //        catch (Exception ex)
        //        {
        //            result = "<br/> Error <br/>" + ("Unable to save file <br/> {0}", ex.Message);
        //        }
        //    }
        //    else
        //    {
        //        result = "no file to upload";
        //    }
        //    lblmessageFile.Text = result;
        //}
        protected void btnUploadExpectedOutputFile_Click(object sender, EventArgs e)
        {
            string result;
            if (DropDownListLanguage.SelectedValue != "")
            {
                if (FileUpload2.HasFile)
                {
                    try
                    {
                        string appPath = HttpRuntime.AppDomainAppPath + @"Temp\\";
                        FileUpload2.SaveAs(appPath + FileUpload2.FileName);
                        string code = "";
                        if (DropDownListLanguage.SelectedItem.Text == "Tableau")
                        {
                            PanelExpectedOutput.Visible = true;
                            string answer = File.ReadAllText(appPath + FileUpload2.FileName);
                            code = answer;
                        }
                        else
                        {
                            PanelExpectedOutput.Visible = false;
                            //string answer = File.ReadAllText(appPath + FileUpload2.FileName);
                            byte[] byteArr = File.ReadAllBytes(appPath + FileUpload2.FileName);
                            string solutionBase64 = Convert.ToBase64String(byteArr, 0, byteArr.Length, Base64FormattingOptions.None);
                            code = solutionBase64;
                        }
                        File.Delete(appPath + FileUpload2.FileName);
                        TextBoxExpectedOutput.Text = code;
                        result = "Expected Output file was uploaded";
                    }
                    catch (Exception ex)
                    {
                        result = "<br/> Error <br/>" + ("Unable to save file <br/> {0}", ex.Message);
                    }
                }
                else
                {
                    result = "no file to upload";
                }
            }
            else
            {
                result = "Please select a program";
            }

            lblmessageFile2.Text = result;
        }
        #endregion =====================================================================================

        #region ===============Test=====================================================================
        //protected void AddNewTest_Click(object sender, EventArgs e)
        //{
        //    if (TestValidation())
        //    {
        //        using (MaterialEntities db = new MaterialEntities())
        //        {
        //            //[Sohel] Fix this
        //            /*Test test = new Test()
        //            {
        //                ParameterValues = TextBoxParameterValues.Text,
        //                ExpectedOutput = TextBoxExpectedOutput.Text,
        //                OutputException = CheckBoxOutPutException.Checked,
        //                Autogenerated = CheckBoxAutoGenerated.Checked,
        //                CodingProblemId = Convert.ToInt32(DropDownListCodingProblem.SelectedValue)
        //            };
        //            db.Tests.Add(test);
        //            db.SaveChanges();
        //            lblMessage.Text = "Save Successfully";*/
        //        }
        //        crearText();
        //        BindGridTest();
        //    }
        //}
        //protected void OnRowEditingTest(object sender, GridViewEditEventArgs e)
        //{
        //    GridViewTest.EditIndex = e.NewEditIndex;
        //    BindGridTest();
        //}
        //protected void OnRowCancelingEditTest(object sender, GridViewCancelEditEventArgs e)
        //{
        //    GridViewTest.EditIndex = -1;
        //    BindGridTest();
        //}
        //protected void OnRowUpdatingTest(object sender, GridViewUpdateEventArgs e)
        //{
        //    GridViewRow row = GridViewTest.Rows[e.RowIndex];
        //    int id = Convert.ToInt32(GridViewTest.DataKeys[e.RowIndex].Values[0]);
        //    string parametervalues = (row.FindControl("TextBox1") as TextBox).Text;
        //    string expectedOutput = (row.FindControl("TextBox2") as TextBox).Text;
        //    bool outputException = (row.FindControl("CheckBox1") as CheckBox).Checked;
        //    bool autogenerated = (row.FindControl("CheckBox2") as CheckBox).Checked;

        //    using (MaterialEntities db = new MaterialEntities())
        //    {
        //        //[Sohel] Fix this
        //        /*Test test = db.Tests.Find(id);
        //        test.ParameterValues = parametervalues;
        //        test.ExpectedOutput = expectedOutput;
        //        test.OutputException = outputException;
        //        test.Autogenerated = autogenerated;

        //        db.SaveChanges();
        //        lblMessage.Text = "Update Successfully!";*/
        //    }
        //    GridViewTest.EditIndex = -1;
        //    BindGridTest();
        //}
        //protected void OnRowDeletingTest(object sender, GridViewDeleteEventArgs e)
        //{
        //    GridViewRow row = GridViewTest.Rows[e.RowIndex];
        //    int id = Convert.ToInt32(GridViewTest.DataKeys[e.RowIndex].Values[0]);
        //}
        //protected void OnRowDataBoundTest(object sender, GridViewRowEventArgs e)
        //{
        //    if (e.Row.RowType == DataControlRowType.DataRow && e.Row.RowIndex != GridViewTest.EditIndex)
        //    {
        //        (e.Row.FindControl("LinkButtonDelete") as LinkButton).Attributes["onclick"] = "return confirm('Do you want to delete this row?');";
        //    }
        //}
        //private void BindGridTest()
        //{
        //    using (MaterialEntities db = new MaterialEntities())
        //    {
        //        int codingProblemId = Convert.ToInt32(DropDownListCodingProblem.SelectedValue);
        //        //[Sohel] Fix this
        //        /*IQueryable<Test> model = db.Tests.Where(x => x.CodingProblemId == codingProblemId);
        //        var model2 = (from a in model
        //                      select new { a.Id, a.ParameterValues, a.ExpectedOutput, OutputException = a.OutputException, Autogenerated = a.Autogenerated });
        //        GridViewTest.DataSource = model.OrderBy(x => x.Id).ToList();
        //        GridViewTest.DataBind();*/
        //    }
        //}
        //protected bool TestValidation()
        //{
        //    bool result = true;
        //    string fieldName = "Test:";
        //    if (string.IsNullOrWhiteSpace(TextBoxParameterValues.Text))
        //    {
        //        fieldName += " Parameter Values -";
        //        result = false;
        //    }
        //    if (string.IsNullOrWhiteSpace(TextBoxExpectedOutput.Text))
        //    {
        //        fieldName += " Expected Output -";
        //        result = false;
        //    }
        //    if (string.IsNullOrWhiteSpace(DropDownListCodingProblem.SelectedValue))
        //    {
        //        fieldName += " Coding Problem -";
        //        result = false;
        //    }
        //    if (!result)
        //    {
        //        lblMessage.Text = "Sorry! Operation has been failed. Required Fields: " + fieldName + ".";
        //    }
        //    return result;
        //}

        #endregion =====================================================================================
        protected void DropDownListCourseFilter2_SelectedIndexChanged(object sender, EventArgs e)
        {
            string i = DropDownListCourseFilter2.SelectedValue;
            DropDownListCourseInstanceFilter.Items.Clear();
            if (i != "")
            {

                using (MaterialEntities db = new MaterialEntities())
                {
                    int courseId = Convert.ToInt32(i);
                    IQueryable<CourseInstance> courseIns = db.CourseInstances.Where(ci => ci.Course.Id == courseId && ci.Active);

                    var list = courseIns.Select(x => new { Name = x.Quarter.StartDate + " TO " + x.Quarter.EndDate, Id = x.Id }).OrderBy(x => x.Id).ToList();
                    //---------------Coruse Instance Droup Down list----------------
                    DropDownListQuarterFilter2.DataSource = list;
                    DropDownListQuarterFilter2.DataTextField = "Name";
                    DropDownListQuarterFilter2.DataValueField = "Id";
                    DropDownListQuarterFilter2.DataBind();
                    //--------------------------------------------------------------------------------
                    if (courseIns.Count() == 1)
                    {
                        BindDropDownListsCourseInstanceFilter(courseIns.FirstOrDefault().Id);
                        //--------------------------------------------
                        filterCodingProblem();
                        BindDropDownModuleObjectiveFilter();
                    }
                    else
                    {
                        DropDownListQuarterFilter2.Items.Insert(0, new ListItem("--Select One--", ""));
                    }
                }
            }
        }
        protected void DropDownListQuarterFilter2_SelectedIndexChanged(object sender, EventArgs e)
        {
            string i = DropDownListQuarterFilter2.SelectedValue;
            if (i != "")
            {
                int courseInstanceId = Convert.ToInt32(i);
                BindDropDownListsCourseInstanceFilter(courseInstanceId);
                //---------------------------------------
                filterCodingProblem();
                BindDropDownModuleObjectiveFilter();
            }
        }
        protected void BindDropDownListsCourseInstanceFilter(int courseInstanceId)
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                var list = db.CourseInstances.Where(ci => ci.Id == courseInstanceId && ci.Active).Select(x => new { x.Id, x.Course.Name }).OrderBy(x => x.Id).ToList();
                //---------------Coruse Instance Droup Down list----------------
                DropDownListCourseInstanceFilter.DataSource = list;
                DropDownListCourseInstanceFilter.DataTextField = "Name";
                DropDownListCourseInstanceFilter.DataValueField = "Id";
                DropDownListCourseInstanceFilter.DataBind();
            }
        }
        protected void BindDropDownListLanguage()
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                var list = db.Languages.Select(x => new { x.Id, x.Name }).OrderBy(x => x.Id).ToList();
                //---------------Droup Down list----------------
                DropDownListLanguage.DataSource = list;
                DropDownListLanguage.DataTextField = "Name";
                DropDownListLanguage.DataValueField = "Id";
                DropDownListLanguage.DataBind();
                DropDownListLanguage.Items.Insert(0, new ListItem("--Select One--", ""));
            }
        }
        //protected void DropDownListType_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    if (DropDownListType.SelectedValue == "file")
        //    {
        //        PanelExcelFile.Visible = true;
        //    }
        //    else
        //    {
        //        PanelExcelFile.Visible = false;
        //    }
        //}
        protected void VisiblePanel(string type)
        {
            PanelCodingProblem.Visible = true;
            if (type == "file")
            {

                PanelExcelFile.Visible = true;

                PanelCodeInstance.Visible = false;
                PanelCodeInstance2.Visible = false;
                PanelTestCase.Visible = false;

                //PanelCodeInstance3.Visible = false;
                PanelTestCode.Visible = false;
                PanelExpectedOutput.Visible = false;
                //PanelAddNewTest.Visible = false;
                //PanelTestList.Visible = false;

                PanelLanguage.Visible = true;
                LabelProgram.Visible = true;
                LabelLanguage.Visible = false;
                //PanelSubmitButton.Visible = true;

                PanelCodeSubmit.Visible = false;
                PanelFileSubmit.Visible = true;

                PanelGrid.Visible = true;
            }
            else if (type == "code")
            {
                PanelExcelFile.Visible = false;
                PanelTestCase.Visible = false;

                PanelCodeInstance.Visible = true;
                PanelCodeInstance2.Visible = true;
                //PanelAddNewTest.Visible = true;
                //PanelTestList.Visible = true;
                //PanelCodeInstance3.Visible = true;
                PanelTestCode.Visible = true;
                PanelExpectedOutput.Visible = true;

                PanelLanguage.Visible = true;
                LabelProgram.Visible = false;
                LabelLanguage.Visible = true;
                //PanelSubmitButton.Visible = true;

                PanelCodeSubmit.Visible = true;
                PanelFileSubmit.Visible = false;

                PanelGrid.Visible = true;
            }
            else
            {
                PanelExcelFile.Visible = false;
                //PanelAddNewTest.Visible = false;
                //PanelTestList.Visible = false;

                PanelTestCase.Visible = false;
                PanelCodeInstance.Visible = false;
                PanelCodeInstance2.Visible = false;

                PanelLanguage.Visible = false;

                PanelCodeSubmit.Visible = true;
                PanelFileSubmit.Visible = false;

                //PanelSubmitButton.Visible = false;
                //PanelCodeInstance3.Visible = false;
                PanelTestCode.Visible = false;
                PanelExpectedOutput.Visible = false;

                PanelGrid.Visible = false;
            }
        }

        protected void AddVariable(object sender, EventArgs e)
        {
            int cantRows = ((int)ViewState["Variables"]) + 1;

            ViewState["Variables"] = cantRows;

            addRow(cantRows - 1);
        }
        protected void DelVariable(object sender, EventArgs e)
        {
            if (TableValues.Rows.Count > 2)
            {
                TableValues.Rows.RemoveAt(TableValues.Rows.Count - 1);
                ViewState["Variables"] = ((int)ViewState["Variables"]) - 1;
            }
            else
            {
                TableValues.Rows.RemoveAt(TableValues.Rows.Count - 1);
                addRow(2);
            }
        }

        protected void btnTestCodingProblem_Click(object sender, EventArgs e)
        {
            //CodingProblem codingproblem = new CodingProblem();
            //codingproblem = new CodingProblem();

            VmCodingProblem codingproblem = new VmCodingProblem();
            codingproblem = new VmCodingProblem();

            codingproblem.Instructions = EditorInstruction.Value;
            codingproblem.Script = TextBoxScript.Text.Trim();
            codingproblem.Solution = TextBoxSolution.Text.Trim();
            codingproblem.Language = DropDownListLanguage.SelectedItem.Text;
            codingproblem.Before = TextBoxBefore.Text.Trim();
            codingproblem.After = TextBoxAfter.Text.Trim();
            codingproblem.MaxGrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim());
            codingproblem.Title = TextBoxTitle.Text.Trim();
            codingproblem.Attempts = Convert.ToInt32(TextBoxAttempts.Text.Trim());
            codingproblem.Active = CheckBoxActive.Checked;
            codingproblem.ExpectedOutput = TextBoxExpectedOutput.Text.Trim();
            codingproblem.TestCode = TextBoxTestCode.Text.Trim();
            codingproblem.TestCodeForStudent = TextBoxTestCodeForStudent.Text.Trim();
            //codingproblem.Parameters = TextBoxParameterValues.Text.Trim();

            List<(string, string)> RowVariables = ReadVariablesInputs();

            //Valid that all variables are correct
            btnMessageHelp.Visible = false;
            lblMessage.Visible = true;
            ErrorCompilation.Visible = false;
            bool tryCompile = true;

            List<(string, string)> RowVariablesSort = RowVariables;
            RowVariablesSort.Sort((a, b) => a.Item1.CompareTo(b.Item1));

            string beforeVal = "";
            if (RowVariablesSort.Count > 1)
            {
                foreach ((string, string) i in RowVariablesSort)
                {
                    if (beforeVal != "" && beforeVal == i.Item1)
                    {
                        lblMessage.Text = "Sorry! The variable " + beforeVal + " is already defined";
                        tryCompile = false;
                        break;
                    }
                    beforeVal = i.Item1;
                }
            }

            if (tryCompile) {
                foreach ((string, string) RowVariablesItem in RowVariables)
                {
                    (bool, string) validateVar = variableValidation(RowVariablesItem);
                    if (!validateVar.Item1)
                    {
                        tryCompile = false;
                        lblMessage.Text = "Sorry! " + validateVar.Item2;
                        break;
                    }
                }
            }

            if (tryCompile)
            {
                try
                {
                    Dictionary<string, string> rowVariablesDic = RowVariables.ToDictionary((a) => a.Item1, (a) => a.Item2);
                    ExecutionResult compilationResult = HttpRunCodeForValidationRequest(codingproblem, rowVariablesDic);
                    //CompilerFunctions.Compiler.RunCodeForValidation(codingproblem, rowVariablesDic); 
                    bool succeed = compilationResult.Succeeded;
                    if (succeed)
                    {
                        lblMessage.Text = "Successfully compilation";
                    }
                    else
                    {
                        lblMessage.Text = "Sorry! Compilation failed";
                        btnMessageHelp.ToolTip = "View details";
                        TextBoxErrorComp.Text = "";
                        for (int i = 0; i < compilationResult.Message.Count; i++)
                        {
                            TextBoxErrorComp.Text += compilationResult.Message[i] + "\n";
                        }
                        string[] stringSeparators = new string[] { "\n" };
                        string[] lines = compilationResult.allCode.TrimEnd().Split(stringSeparators, StringSplitOptions.None);

                        string allCode = "";
                        StringBuilder sb = new StringBuilder();
                        int j = 1;
                        foreach (string line in lines) {
                            if (line == "")
                            {
                                sb.AppendLine();
                                sb.AppendFormat("{0}: {1}", j, line).AppendLine();
                            }
                            else {
                                sb.AppendFormat("{0}: {1}", j, line);
                            }
                            
                            j++;
                        }
                        allCode = sb.ToString();

                        TextBoxAllCode.Text = allCode;
                        TextBoxAllCode.Enabled = false;
                        TextBoxErrorComp.Enabled = false;
                        ErrorCompilation.Visible = true;
                        btnMessageHelp.Visible = true;
                    }
                }
                catch (Exception exc)
                {
                    lblMessage.Text = "Sorry! " + exc.Message;
                }
            }
        }

        public static ExecutionResult HttpRunCodeForValidationRequest(VmCodingProblem codingProblem, Dictionary<string, string> rowVariablesDic)
        {
            using (var client = new HttpClient())
            {
                RunCodeForValidationInput runCodeForValidationInput = new RunCodeForValidationInput()
                {
                    Instructions = codingProblem.Instructions,
                    Script = codingProblem.Script,
                    Solution = codingProblem.Solution,
                    Language = codingProblem.Language,
                    Before = codingProblem.Before,
                    After = codingProblem.After,
                    ExpectedOutput = codingProblem.ExpectedOutput,
                    TestCode = codingProblem.TestCode,
                    ParameterTypes = codingProblem.ParameterTypes,
                    VarValuePairs = rowVariablesDic
                };

                //CompilerApiInput compilerRunApiInput = new CompilerApiInput();
                //compilerRunApiInput.CompilerInfo = compilerInfo;
                //compilerRunApiInput.RunInfo = runInfo;

                //client.BaseAddress = new Uri("https://localhost:7061/api/");
                client.BaseAddress = new Uri(ConfigurationHelper.GetApiBaseURL());
                var jsonStringInput = Newtonsoft.Json.JsonConvert.SerializeObject(runCodeForValidationInput);
                HttpContent httpContent = new StringContent(jsonStringInput, System.Text.Encoding.UTF8, "application/json");
                var response = client.PostAsync("Assignment/RunCodeForValidationAPI", httpContent).Result;
                if (response.IsSuccessStatusCode)
                {
                    var jsonResultString = response.Content.ReadAsStringAsync();
                    jsonResultString.Wait();
                    ExecutionResult executionResult = Newtonsoft.Json.JsonConvert.DeserializeObject<ExecutionResult>(jsonResultString.Result);
                    return executionResult;
                }
                else
                    return null;
            }
        }
        protected void renderVariables()
        {

            for (int i = 2; i < ((int)ViewState["Variables"]); i++)
            {
                addRow(i);
            }
        }

        protected void addRow(int i)
        {
            //New Row
            TableRow tableRow = new TableRow();
            tableRow.ID = DropDownListCodingProblem.SelectedValue + i.ToString();

            tableRow.Style.Add(HtmlTextWriterStyle.BackgroundColor, "white");

            //Name
            TableCell cellName = new TableCell();
            cellName.ID = DropDownListCodingProblem.SelectedValue + "Cell" + i.ToString() + "1";
            TextBox txName = new TextBox();
            txName.ID = DropDownListCodingProblem.SelectedValue + "Ctl" + i.ToString() + "1";
            txName.Attributes.Add("placeholder", "Enter Name");
            cellName.Controls.Add(txName);

            //Values
            TableCell cellValue = new TableCell();
            cellValue.ID = DropDownListCodingProblem.SelectedValue + "Cell" + i.ToString() + "2";
            TextBox txValue = new TextBox();
            txValue.ID = DropDownListCodingProblem.SelectedValue + "Ctl" + i.ToString() + "2";
            txValue.Attributes.Add("placeholder", "Enter Values");
            cellValue.Controls.Add(txValue);

            tableRow.Cells.Add(cellName);
            tableRow.Cells.Add(cellValue);

            TableValues.Rows.Add(tableRow);

        }
        protected List<(string, string)> ReadVariablesInputs()
        {

            List<(string, string)> RowValues = new List<(string, string)>();

            for (int i = 1; i < TableValues.Rows.Count; i++)
            {
                
                String IdName = TableValues.Rows[i].Cells[0].Controls[0].ClientID;
                TextBox ContentName = (TextBox)TableValues.Rows[i].Cells[0].FindControl(IdName);

                //Multiple variables are obtained
                String[] ColMultiVar = ContentName.Text.Split(',');

                String IdValues = TableValues.Rows[i].Cells[1].Controls[0].ClientID;
                TextBox ContentValues = (TextBox)TableValues.Rows[i].Cells[1].FindControl(IdValues);

                for (int j = 0; j < ColMultiVar.Count(); j++)
                {
                    if (ContentName.Text != "" || ContentValues.Text != "")
                {
                    RowValues.Add((ColMultiVar.GetValue(j).ToString(), ContentValues.Text.Trim()));
                }

                }
            }
            return RowValues;
        }

        protected ExecutionResult compileCodingProblem(VmCodingProblem cd, List<(string, string)> RowVariables)
        {
            Dictionary<string, string> rowVariablesDic = RowVariables.ToDictionary((a) => a.Item1, (a) => a.Item2);
            ExecutionResult compilationResult = HttpRunCodeForValidationRequest(cd, rowVariablesDic);
            //CompilerFunctions.Compiler.RunCodeForValidation(cd, rowVariablesDic);
            return compilationResult;

        }

        protected void DropDownListLanguage_SelectedIndexChanged(object sender, EventArgs e)
        {
            string languageName = DropDownListLanguage.SelectedItem.Text;
            bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                languageName == "Cpp" || languageName == "Python" ||
                                languageName == "R" || languageName == "SQL");
            if (needCompile)
            {
                btnTestCodingProblem.Visible = true;
            }
            else
            {
                btnTestCodingProblem.Visible = false;
            }
        }

        protected void btnSetGrades_Click(object sender, EventArgs e)
        {
            string expected = TextBoxExpectedOutput.Text.Trim();
            if (expected == "") return;

            string[] expectedLines = expected.Split('\n').ToList().Where(x => x.Replace("\r","") != "").ToArray();
            string newExpected = "";

            int maxgrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim());
            if (maxgrade <= 0) maxgrade = 100;
            int lineGrade = maxgrade / expectedLines.Length;
            if (maxgrade % expectedLines.Length > 0) lineGrade++;

            for(int i = 0; i < expectedLines.Length; i++) {
                string line = expectedLines[i];

                //Total grade must be maxgrade
                if (i == expectedLines.Length - 1) lineGrade = maxgrade - (lineGrade * i);

                //check if the line has already been assigned a grade
                int dash_index = line.IndexOf('-');
                string newline = "";

                if (dash_index >= 0) {
                    try {
                        int number = Int32.Parse(line.Substring(0, dash_index));
                        newline = line.Substring(dash_index + 1).Trim();
                    }
                    catch (FormatException) {
                        newline = line.Trim();
                    }
                }
                else newline = line.Trim();

                newExpected += lineGrade.ToString() + " - " + newline.Replace("\r", "") + "\n";
            }

            TextBoxExpectedOutput.Text = newExpected;
        }

        protected (bool, string) variableValidation((string, string) variable)
        {
            string msg = "";

            if (variable.Item1 != "" && variable.Item2 != "")
            {
                string pattern = @".*\$.*|.*\{.*|.*\}.*|^studentid$"; //Not allow variables with $,{,} and "studentid"
                bool nameNotValid = Regex.IsMatch(variable.Item1, pattern, RegexOptions.IgnoreCase);
                if (nameNotValid)
                {
                    msg = "Name " + variable.Item1 + " is not valid";
                    return (false, msg);
                }
                else
                {
                    string[] possiblesValues = Regex.Split(variable.Item2, @"(?<!\/)\,(?![^[]*]|[^{]*})");
                    if (Regex.IsMatch(variable.Item2, "\\["))
                    {
                        foreach (String possiblesValuesItem in possiblesValues)
                        {
                            bool isArray = Regex.IsMatch(possiblesValuesItem, @"^\[([\w]+((,[\w]*)+|([\w]*)+)\]$)|^\{([\w]+((,[\w]*)+|([\w]*)+)\}$)");
                            if (!isArray)
                            {
                                msg = "The variable named " + variable.Item1 + " has a wrongly defined " + possiblesValuesItem;
                                return (false, msg);
                            }
                        }
                        return (true, msg);
                    }
                    else
                    {
                        foreach (String possiblesValuesItem in possiblesValues)
                        {
                            pattern = "\\.\\.";
                            bool isRange = Regex.IsMatch(possiblesValuesItem, pattern);
                            if (isRange)
                            {
                                string[] range = possiblesValuesItem.Trim().Split(new[] { ".." }, StringSplitOptions.RemoveEmptyEntries);
                                if (range.Count() > 1)
                                {
                                    pattern = "\\:";
                                    bool haveColon = Regex.IsMatch(range[1], pattern);
                                    string[] ColInRange = range[1].Trim().Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
                                    if (haveColon && ColInRange.Count() != 2)
                                    {
                                        msg = "The variable named " + variable.Item1.Trim() + " has a wrongly defined range";
                                        return (false, msg);
                                    }
                                }
                                else
                                {
                                    msg = "The variable named " + variable.Item1.Trim() + " has a wrongly defined range";
                                    return (false, msg);
                                }
                            }
                        }
                        return (true, msg);
                    }
                }
            }
            else if (variable.Item1 != "" && variable.Item2 == "")
            {
                msg = "Possible values is required";
                return (false, msg);
            }
            else if (variable.Item1 == "" && variable.Item2 != "")
            {
                msg = "Variable name is required";
                return (false, msg);
            }
            else
            {
                return (true, msg);
            }
        }

        protected void set_StartCode(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(DropDownListLanguage.SelectedValue))
            {
                lblMessage.Text = "Sorry! Operation has been failed. Required Fields: Languague.";
            }
            else
            {
                using (MaterialEntities db = new MaterialEntities())
                {
                    string selectedLenguague = DropDownListLanguage.SelectedValue;
                    Language language = db.Languages.Find(Convert.ToInt32(selectedLenguague));
                    string startendcode = language.CodeStart + "\n" + language.CodeEnd;
                    if (TextBoxScript.Text == "")
                    {
                        IndicateStart.Value = "0";
                    }
                    else
                    {
                        TextBoxScript.Text += " ";
                    }
                    TextBoxScript.Text = TextBoxScript.Text.Insert(Convert.ToInt32(IndicateStart.Value), startendcode);
                }
            }
        }
    }
}