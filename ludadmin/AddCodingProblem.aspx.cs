using EFModel;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using LMSLibrary;
using RESTCompilerFunctions;
using CompilerFunctions;
using System.Text;
using LMS.Common.ViewModels;
using LMS.Common.Infos;
using System.Net.Http;
using AdminPages.Helpers;

namespace OnlineLearningSystem
{
    public partial class AddCodingProblem : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindDropDownListLanguage();
                ViewState["Variables"] = 3;
            }
            renderVariables();
        }
        private void crearText()
        {
            //TextBoxParameterValues.Text = "";
            TextBoxExpectedOutput.Text = "";
        }
        protected void btnCodingProblemListPage_Click(object sender, EventArgs e)
        {
            Page.ClientScript.RegisterStartupScript(GetType(), "OpenWindow", "window.open('QuizQuestionList.aspx','_newtab');", true);
        }
        private void clearAll()
        {
            lblCodingProblemId.Text = "";
            //CheckBoxAutoGenerated.Checked = false;
            //CheckBoxOutPutException.Checked = false;
            TextBoxTestCode.Text = "";
            TextBoxTestCodeForStudent.Text = "";

            //TextBoxInstruction.Text = "";
            EditorInstruction.Value = "";

            TextBoxScript.Text = "";
            TextBoxSolution.Text = "";
            //TextBoxClassName.Text = "";
            //TextBoxMethodName.Text = "";
            //TextBoxParameterTypes.Text = "";
            //TextBoxLanguage.Text = "";
            DropDownListLanguage.SelectedIndex = -1;
            TextBoxTestCaseClass.Text = "";
            TextBoxBefore.Text = "";
            TextBoxAfter.Text = "";

            TextBoxMaxGrade.Text = "100";
            TextBoxTitle.Text = "";
            //TextBoxType.Text = "";
            DropDownListType.SelectedIndex = -1;
            TextBoxAttempts.Text = "100";
            //TextBoxRole.Text = "100";
            DropDownListRole.SelectedIndex = -1;

            //TextBoxParameterValues.Text = "";
            TextBoxExpectedOutput.Text = "";
            //TextBoxOutputType.Text = "";

            btnAddNewCodingProblem.Attributes.Remove("disabled");
            btnAddNewCodingProblem.Style["pointer-events"] = "visible";

            PanelExcelFile.Visible = false;
            PanelCodeInstance.Visible = false;
            PanelCodeInstance2.Visible = false;
            PanelTestCase.Visible = false;
            //PanelAddNewTest.Visible = false;
            //PanelTestList.Visible = false;
            PanelLanguage.Visible = false;
            LabelProgram.Visible = true;
            //PanelSubmitButton.Visible = false;
            //PanelCodeInstance3.Visible = false;
            PanelTestCode.Visible = false;
            PanelCodeSubmit.Visible = false;
            PanelFileSubmit.Visible = false;
            PanelExpectedOutput.Visible = false;
            PanelGrid.Visible = false;
            lblMessage.Text = "";
            lblmessageFile2.Text = "";
            //GridViewTest.DataSource = null;
            //GridViewTest.DataBind();

            for (int i = TableValues.Rows.Count; i > 1; i--)
            {
                ((TextBox)TableValues.Rows[i - 1].Cells[0].Controls[0]).Text = "";
                ((TextBox)TableValues.Rows[i - 1].Cells[1].Controls[0]).Text = "";

                TableValues.Rows.RemoveAt(i - 1);
            }
            ViewState["Variables"] = 3;
        }
        protected void btnClearAll_Click(object sender, EventArgs e)
        {
            clearAll();
        }
        protected void btnAssessmentListPage_Click(object sender, EventArgs e)
        {
            Page.ClientScript.RegisterStartupScript(GetType(), "OpenWindow", "window.open('CodingProblemList.aspx','_newtab');", true);
        }

        #region ===============CodingProblem============================================================
        protected void btnAddNewCodingProblem_Click(object sender, EventArgs e)
        {
            if (CodingProblemValidation())
            {
                //var moduleObjetiveId = Convert.ToInt32(DropDownListModuleObjective.SelectedValue);
                using (MaterialEntities db = new MaterialEntities())
                {
                    //int usesHint = -1;
                    //if (CheckboxUsesHint.Checked)
                    //{
                    //    usesHint = 1;
                    //}

                    //CodingProblem codingProblem = createCodingProblemInstance();
                    VmCodingProblem cProblem = createCodingProblemInstance();
                    List<(string, string)> RowVariables = ReadVariablesInputs();

                    CodingProblem codingProblem = GetCodingProblemModel(cProblem);

                    db.CodingProblems.Add(codingProblem);

                    lblCodingProblemId.Text = Convert.ToString(codingProblem.Id);
                    bool commit = true;
                    btnMessageHelp.Visible = false;
                    ErrorCompilation.Visible = false;
                    btnMessageHelp.ToolTip = "";

                    List<(string, string)> RowVariablesSort = RowVariables;
                    RowVariablesSort.Sort((a, b) => a.Item1.CompareTo(b.Item1));

                    string beforeVal = "";
                    if (RowVariablesSort.Count > 1)
                    {
                        foreach ((string, string) i in RowVariablesSort)
                        {
                            if (beforeVal != "" && beforeVal == i.Item1)
                            {
                                lblMessage.Text = "Sorry! The variable " + beforeVal + " already defined";
                                commit = false;
                                break;
                            }
                            beforeVal = i.Item1;
                        }
                    }

                    if (commit)
                    {
                        foreach ((string, string) i in RowVariables)
                        {
                            if (i.Item1.Trim() != "" && i.Item2.Trim() != "")
                            {
                                (bool, string) validateVariable = variableValidation(i);
                                if (validateVariable.Item1)
                                {
                                    VariableValue varValues = new VariableValue();
                                    varValues = new VariableValue()
                                    {
                                        CodingProblem = codingProblem,
                                        VarName = i.Item1.Trim(),
                                        possibleValues = i.Item2.Trim()
                                    };
                                    db.VariableValues.Add(varValues);
                                }
                                else
                                {
                                    lblMessage.Text = validateVariable.Item2;
                                    commit = false;
                                    break;
                                }
                            }
                        }
                    }

                    if (commit)
                    {
                        db.SaveChanges();
                        string languageName = DropDownListLanguage.SelectedItem.Text;
                        bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                            languageName == "C++" || languageName == "Python" ||
                                            languageName == "R");
                        try
                        {
                            btnMessageHelp.ToolTip = "";

                            if (needCompile)
                            {
                                //ExecutionResult compilationResult = compileCodingProblem(codingProblem, RowVariables);
                                ExecutionResult compilationResult = compileCodingProblem(cProblem, RowVariables);

                                if (!compilationResult.Compiled)
                                {
                                    lblMessage.Text = "Sorry! Compilation failed. Saved with errors.";
                                    btnMessageHelp.ToolTip = "View details";
                                    TextBoxErrorComp.Text = "";
                                    for (int i = 0; i < compilationResult.Message.Count; i++)
                                    {
                                        TextBoxErrorComp.Text += compilationResult.Message[i] + "\n";
                                    }
                                    string[] stringSeparators = new string[] { "\n" };
                                    string[] lines = compilationResult.allCode.TrimEnd().Split(stringSeparators, StringSplitOptions.None);

                                    string allCode = "";
                                    StringBuilder sb = new StringBuilder();
                                    int j = 1;
                                    foreach (string line in lines)
                                    {
                                        if (line == "")
                                        {
                                            sb.AppendLine();
                                            sb.AppendFormat("{0}: {1}", j, line).AppendLine();
                                        }
                                        else
                                        {
                                            sb.AppendFormat("{0}: {1}", j, line);
                                        }

                                        j++;
                                    }
                                    allCode = sb.ToString();

                                    TextBoxAllCode.Text = allCode;
                                    TextBoxAllCode.Enabled = false;
                                    TextBoxErrorComp.Enabled = false;
                                    ErrorCompilation.Visible = true;
                                    btnMessageHelp.Visible = true;
                                }
                                else
                                {
                                    lblMessage.Text = "Saved Successfully";
                                }
                            }
                            else
                            {
                                lblMessage.Text = "Saved Successfully";
                            }

                            btnAddNewCodingProblem.Attributes["disabled"] = "disabled";
                            btnAddNewCodingProblem.Style["pointer-events"] = "none";
                        }
                        catch (Exception exc)
                        {
                            lblMessage.Text = "Sorry! " + exc.Message + " Saved with errors.";
                        }
                    }
                }
                //clearAll();
            }
        }

        private CodingProblem GetCodingProblemModel(VmCodingProblem cProblem)
        {
            CodingProblem codingProblem = new CodingProblem();
            codingProblem.Instructions = cProblem.Instructions;
            codingProblem.Script = cProblem.Script;
            codingProblem.Solution = cProblem.Solution;
            codingProblem.ClassName = cProblem.ClassName;
            codingProblem.MethodName = cProblem.MethodName;
            codingProblem.ParameterTypes = cProblem.ParameterTypes;
            codingProblem.Language = cProblem.Language;
            codingProblem.TestCaseClass = cProblem.TestCaseClass;
            codingProblem.Before = cProblem.Before;
            codingProblem.After = cProblem.After;
            codingProblem.MaxGrade = cProblem.MaxGrade;
            codingProblem.Title = cProblem.Title;
            codingProblem.Type = cProblem.Type;
            codingProblem.Attempts = cProblem.Attempts;
            codingProblem.Active = cProblem.Active;
            codingProblem.Role = cProblem.Role;
            codingProblem.Id = cProblem.Id;
            codingProblem.ExpectedOutput = cProblem.ExpectedOutput;
            codingProblem.Parameters = cProblem.Parameters;
            codingProblem.TestCode = cProblem.TestCode;
            codingProblem.TestCodeForStudent = cProblem.TestCodeForStudent;
            //codingProblem.VariableValues = cProblem.VariableValues;
            return codingProblem;
        }

        //protected CodingProblem createCodingProblemInstance()
        protected VmCodingProblem createCodingProblemInstance()
        {
            if (String.IsNullOrWhiteSpace(TextBoxSolution.Text) && DropDownListType.SelectedValue == "code")
            {
                throw new SolutionNotFoundException("The problem solution is needed in order to verify it.");
            }

            //CodingProblem codingProblem = new CodingProblem();
            //codingProblem = new CodingProblem()
            VmCodingProblem codingProblem = new VmCodingProblem();
            codingProblem = new VmCodingProblem()
            {
                //Instructions = TextBoxInstruction.Text.Trim(),
                Instructions = EditorInstruction.Value,
                Script = TextBoxScript.Text.Trim(),
                Solution = TextBoxSolution.Text.Trim(),
                //ClassName = TextBoxClassName.Text.Trim(),
                //MethodName = TextBoxMethodName.Text.Trim(),
                ClassName = "",
                MethodName = "",
                //ParameterTypes = TextBoxParameterTypes.Text.Trim(),
                ParameterTypes = "",
                Language = DropDownListLanguage.SelectedItem.Text,
                TestCaseClass = TextBoxTestCaseClass.Text.Trim(),
                Before = TextBoxBefore.Text.Trim(),
                After = TextBoxAfter.Text.Trim(),
                MaxGrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim()),
                Title = TextBoxTitle.Text.Trim(),
                Type = DropDownListType.SelectedValue,
                Attempts = Convert.ToInt32(TextBoxAttempts.Text.Trim()),
                Active = CheckBoxActive.Checked,
                Role = Convert.ToInt32(DropDownListRole.SelectedValue),
                ExpectedOutput = TextBoxExpectedOutput.Text.Trim(),
                TestCode = TextBoxTestCode.Text.Trim(),
                TestCodeForStudent = TextBoxTestCodeForStudent.Text.Trim(),
                //Parameters = TextBoxParameterValues.Text.Trim()
                Parameters = ""
            };
            return codingProblem;
        }

        protected bool CodingProblemValidation()
        {
            bool result = true;
            string fieldName = "";

            if (string.IsNullOrWhiteSpace(DropDownListType.SelectedValue))
            {
                fieldName += " Type -";
                result = false;
            }

            if (string.IsNullOrWhiteSpace(DropDownListLanguage.SelectedValue))
            {
                fieldName += " Language -";
                result = false;
            }

            if (string.IsNullOrWhiteSpace(TextBoxMaxGrade.Text))
            {
                fieldName += " Max Grade -";
                result = false;
            }
            if (string.IsNullOrWhiteSpace(TextBoxTitle.Text))
            {
                fieldName += " Title -";
                result = false;
            }

            if (string.IsNullOrWhiteSpace(TextBoxAttempts.Text))
            {
                fieldName += " Attempts -";
                result = false;
            }
            if (string.IsNullOrWhiteSpace(DropDownListRole.SelectedValue))
            {
                fieldName += " Role -";
                result = false;
            }
            string languageName = DropDownListLanguage.SelectedItem.Text;
            bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                languageName == "C++" || languageName == "Python" ||
                                languageName == "R");
            if (needCompile)
            {
                if (string.IsNullOrWhiteSpace(EditorInstruction.Value))
                {
                    fieldName += " Instructions -";
                    result = false;
                }
                if (string.IsNullOrWhiteSpace(TextBoxSolution.Text))
                {
                    fieldName += " Solution -";
                    result = false;
                }
            }
            if (!result)
            {
                result = false;
                lblMessage.Text = "Sorry! Operation has been failed. Required Fields: " + fieldName + ".";
            }
            return result;
        }
        protected void btnUploadExpectedOutputFile_Click(object sender, EventArgs e)
        {
            string result;
            if (DropDownListLanguage.SelectedValue != "")
            {
                if (FileUpload2.HasFile)
                {
                    try
                    {
                        string appPath = HttpRuntime.AppDomainAppPath + @"Temp\\";
                        FileUpload2.SaveAs(appPath + FileUpload2.FileName);
                        string code = "";
                        if (DropDownListLanguage.SelectedItem.Text == "Tableau")
                        {
                            PanelExpectedOutput.Visible = true;
                            string answer = File.ReadAllText(appPath + FileUpload2.FileName);
                            code = answer;
                        }
                        else
                        {
                            PanelExpectedOutput.Visible = false;
                            //string answer = File.ReadAllText(appPath + FileUpload2.FileName);
                            byte[] byteArr = File.ReadAllBytes(appPath + FileUpload2.FileName);
                            string solutionBase64 = Convert.ToBase64String(byteArr, 0, byteArr.Length, Base64FormattingOptions.None);
                            code = solutionBase64;
                        }
                        File.Delete(appPath + FileUpload2.FileName);
                        TextBoxExpectedOutput.Text = code;
                        result = "Expected Output file was uploaded";
                    }
                    catch (Exception ex)
                    {
                        result = "<br/> Error <br/>" + ("Unable to save file <br/> {0}", ex.Message);
                    }
                }
                else
                {
                    result = "no file to upload";
                }
            }
            else
            {
                result = "Please select a program";
            }

            lblmessageFile2.Text = result;
        }

        #endregion =====================================================================================

        protected void BindDropDownListLanguage()
        {
            using (MaterialEntities db = new MaterialEntities())
            {
                var list = db.Languages.Select(x => new { x.Id, x.Name }).OrderBy(x => x.Id).ToList();
                //---------------Droup Down list----------------
                DropDownListLanguage.DataSource = list;
                DropDownListLanguage.DataTextField = "Name";
                DropDownListLanguage.DataValueField = "Id";
                DropDownListLanguage.DataBind();
                DropDownListLanguage.Items.Insert(0, new ListItem("--Select One--", ""));
            }
        }

        protected void DropDownListType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (DropDownListType.SelectedValue == "file")
            {
                PanelExcelFile.Visible = true;

                PanelCodeInstance.Visible = false;
                PanelCodeInstance2.Visible = false;
                PanelTestCase.Visible = false;

                PanelTestCode.Visible = false;
                PanelExpectedOutput.Visible = false;

                PanelLanguage.Visible = true;
                LabelProgram.Visible = true;

                PanelCodeSubmit.Visible = false;
                PanelFileSubmit.Visible = true;

                PanelGrid.Visible = true;

            }
            else if (DropDownListType.SelectedValue == "code")
            {
                PanelExcelFile.Visible = false;
                PanelTestCase.Visible = false;

                PanelCodeInstance.Visible = true;
                PanelCodeInstance2.Visible = true;

                PanelTestCode.Visible = true;
                PanelExpectedOutput.Visible = true;

                PanelLanguage.Visible = true;
                LabelProgram.Visible = true;

                PanelCodeSubmit.Visible = true;
                PanelFileSubmit.Visible = false;

                PanelGrid.Visible = true;

            }
            else
            {
                PanelExcelFile.Visible = false;

                PanelTestCase.Visible = false;
                PanelCodeInstance.Visible = false;
                PanelCodeInstance2.Visible = false;

                PanelLanguage.Visible = false;

                PanelCodeSubmit.Visible = false;
                PanelFileSubmit.Visible = false;

                PanelTestCode.Visible = false;
                PanelExpectedOutput.Visible = false;

                PanelGrid.Visible = false;

            }
        }

        //protected void DropDownListLanguage_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    if (DropDownListLanguage.SelectedItem.Text == "Tableau")
        //    {
        //        PanelExpectedOutput.Visible = true;
        //    }
        //    else {
        //        PanelExpectedOutput.Visible = false;
        //    }
        //}

        protected void AddVariable(object sender, EventArgs e)
        {
            int cantRows = ((int)ViewState["Variables"]) + 1;

            ViewState["Variables"] = cantRows;

            addRow(cantRows);
        }

        protected void renderVariables()
        {

            for (int i = 2; i < ((int)ViewState["Variables"]); i++)
            {
                addRow(i);
            }
        }

        protected void DelVariable(object sender, EventArgs e)
        {
            if (TableValues.Rows.Count > 2)
            {
                TableValues.Rows.RemoveAt(TableValues.Rows.Count - 1);
                ViewState["Variables"] = ((int)ViewState["Variables"]) - 1;
            }
        }
        protected void addRow(int i)
        {
            //New Row
            TableRow tableRow = new TableRow();
            tableRow.ID = i.ToString();

            tableRow.Style.Add(HtmlTextWriterStyle.BackgroundColor, "white");

            //Name
            TableCell cellName = new TableCell();
            cellName.ID = "Cell" + i.ToString() + "1";
            TextBox txName = new TextBox();
            txName.Attributes.Add("placeholder", "Enter Name");
            cellName.Controls.Add(txName);

            //Values
            TableCell cellValue = new TableCell();
            cellValue.ID = "Cell" + i.ToString() + "2";
            TextBox txValue = new TextBox();
            txValue.Attributes.Add("placeholder", "Enter Values");
            cellValue.Controls.Add(txValue);

            tableRow.Cells.Add(cellName);
            tableRow.Cells.Add(cellValue);

            TableValues.Rows.Add(tableRow);

        }

        protected List<(string, string)> ReadVariablesInputs()
        {

            List<(string, string)> RowValues = new List<(string, string)>();

            for (int i = 1; i < TableValues.Rows.Count; i++)
            {
                String IdName = TableValues.Rows[i].Cells[0].Controls[0].ClientID;
                TextBox ContentName = (TextBox)TableValues.Rows[i].Cells[0].FindControl(IdName);

                //Multiple variables are obtained
                String[] ColMultiVar = ContentName.Text.Split(',');

                String IdValues = TableValues.Rows[i].Cells[1].Controls[0].ClientID;
                TextBox ContentValues = (TextBox)TableValues.Rows[i].Cells[1].FindControl(IdValues);

                for (int j = 0; j < ColMultiVar.Count(); j++)
                {
                    RowValues.Add((ColMultiVar.GetValue(j).ToString(), ContentValues.Text.Trim()));
                }
            }

            return RowValues;
        }

        protected void btnTestCodingProblem_Click(object sender, EventArgs e)
        {
            try
            {
                //CodingProblem codingProblem = new CodingProblem();
                //codingProblem = new CodingProblem();
                VmCodingProblem codingProblem = new VmCodingProblem();
                codingProblem = new VmCodingProblem();

                codingProblem.Instructions = EditorInstruction.Value;
                codingProblem.Script = TextBoxScript.Text.Trim();
                codingProblem.Solution = TextBoxSolution.Text.Trim();
                codingProblem.Language = DropDownListLanguage.SelectedItem.Text;
                codingProblem.Before = TextBoxBefore.Text.Trim();
                codingProblem.After = TextBoxAfter.Text.Trim();
                codingProblem.MaxGrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim());
                codingProblem.Title = TextBoxTitle.Text.Trim();
                codingProblem.Attempts = Convert.ToInt32(TextBoxAttempts.Text.Trim());
                codingProblem.Active = CheckBoxActive.Checked;
                codingProblem.ExpectedOutput = TextBoxExpectedOutput.Text.Trim();
                codingProblem.TestCode = TextBoxTestCode.Text.Trim();

                List<(string, string)> RowVariables = ReadVariablesInputs();

                //Valid that all variables are correct
                btnMessageHelp.Visible = false;
                ErrorCompilation.Visible = false;
                bool tryCompile = true;

                List<(string, string)> RowVariablesSort = RowVariables;
                RowVariablesSort.Sort((a, b) => a.Item1.CompareTo(b.Item1));

                string beforeVal = "";
                if (RowVariablesSort.Count > 1)
                {
                    foreach ((string, string) i in RowVariablesSort)
                    {
                        if (beforeVal != "" && beforeVal == i.Item1)
                        {
                            lblMessage.Text = "Sorry! The variable " + beforeVal + " is already defined";
                            tryCompile = false;
                            break;
                        }
                        beforeVal = i.Item1;
                    }
                }

                if (tryCompile)
                {
                    foreach ((string, string) RowVariablesItem in RowVariables)
                    {
                        (bool, string) validateVar = variableValidation(RowVariablesItem);
                        if (!validateVar.Item1)
                        {
                            tryCompile = false;
                            lblMessage.Text = "Sorry! " + validateVar.Item2;
                            break;
                        }
                    }
                }

                if (tryCompile)
                {
                    Dictionary<string, string> rowVariablesDic = RowVariables.ToDictionary((a) => a.Item1, (a) => a.Item2);
                    try
                    {
                        ExecutionResult compilationResult = HttpRunCodeForValidationRequest(codingProblem, rowVariablesDic);
                        //CompilerFunctions.Compiler.RunCodeForValidation(codingProblem, rowVariablesDic); //Se espera que sea info que haya pasado la validacion? 
                        bool succeed = compilationResult.Succeeded;
                        if (succeed)
                        {
                            lblMessage.Text = "Compiled Successfully";
                        }
                        else
                        {
                            lblMessage.Text = "Sorry! Compilation failed";
                            btnMessageHelp.ToolTip = "View details";
                            TextBoxErrorComp.Text = "";
                            for (int i = 0; i < compilationResult.Message.Count; i++)
                            {
                                TextBoxErrorComp.Text += compilationResult.Message[i] + "\n";
                            }
                            string[] stringSeparators = new string[] { "\n" };
                            string[] lines = compilationResult.allCode.TrimEnd().Split(stringSeparators, StringSplitOptions.None);

                            string allCode = "";
                            StringBuilder sb = new StringBuilder();
                            int j = 1;
                            foreach (string line in lines)
                            {
                                if (line == "")
                                {
                                    sb.AppendLine();
                                    sb.AppendFormat("{0}: {1}", j, line).AppendLine();
                                }
                                else
                                {
                                    sb.AppendFormat("{0}: {1}", j, line);
                                }

                                j++;
                            }
                            allCode = sb.ToString();

                            TextBoxAllCode.Text = allCode;
                            TextBoxAllCode.Enabled = false;
                            TextBoxErrorComp.Enabled = false;
                            ErrorCompilation.Visible = true;
                            btnMessageHelp.Visible = true;
                        }
                    }
                    catch (Exception exc)
                    {
                        lblMessage.Text = "Sorry! " + exc.Message;
                    }
                }
            }
            catch (Exception exc)
            {
                lblMessage.Text = "Sorry! " + exc.Message;
            }
        }

        public static ExecutionResult HttpRunCodeForValidationRequest(VmCodingProblem codingProblem, Dictionary<string, string> rowVariablesDic)
        {
            using (var client = new HttpClient())
            {
                RunCodeForValidationInput runCodeForValidationInput = new RunCodeForValidationInput()
                {
                    Instructions = codingProblem.Instructions,
                    Script = codingProblem.Script,
                    Solution = codingProblem.Solution,
                    Language = codingProblem.Language,
                    Before = codingProblem.Before,
                    After = codingProblem.After,
                    ExpectedOutput = codingProblem.ExpectedOutput,
                    TestCode = codingProblem.TestCode,
                    ParameterTypes = codingProblem.ParameterTypes,
                    VarValuePairs = rowVariablesDic
                };

                //CompilerApiInput compilerRunApiInput = new CompilerApiInput();
                //compilerRunApiInput.CompilerInfo = compilerInfo;
                //compilerRunApiInput.RunInfo = runInfo;
                
                //client.BaseAddress = new Uri("https://localhost:7061/api/");
                client.BaseAddress = new Uri(ConfigurationHelper.GetApiBaseURL());
                var jsonStringInput = Newtonsoft.Json.JsonConvert.SerializeObject(runCodeForValidationInput);
                HttpContent httpContent = new StringContent(jsonStringInput, System.Text.Encoding.UTF8, "application/json");
                var response = client.PostAsync("Assignment/RunCodeForValidationAPI", httpContent).Result;
                if (response.IsSuccessStatusCode)
                {
                    var jsonResultString = response.Content.ReadAsStringAsync();
                    jsonResultString.Wait();
                    ExecutionResult executionResult = Newtonsoft.Json.JsonConvert.DeserializeObject<ExecutionResult>(jsonResultString.Result);
                    return executionResult;
                }
                else
                    return null;
            }
        }

        //protected ExecutionResult compileCodingProblem(CodingProblem cd, List<(string, string)> RowVariables)
        protected ExecutionResult compileCodingProblem(VmCodingProblem cd, List<(string, string)> RowVariables)
        {
            Dictionary<string, string> rowVariablesDic = RowVariables.ToDictionary((a) => a.Item1, (a) => a.Item2);
            ExecutionResult compilationResult = HttpRunCodeForValidationRequest(cd, rowVariablesDic);
            //CompilerFunctions.Compiler.RunCodeForValidation(cd, rowVariablesDic);
            return compilationResult;
        }

        protected void DropDownListLanguage_SelectedIndexChanged(object sender, EventArgs e)
        {
            string languageName = DropDownListLanguage.SelectedItem.Text;
            bool needCompile = (languageName == "Java" || languageName == "C#" ||
                                languageName == "Cpp" || languageName == "Python" ||
                                languageName == "R" || languageName == "SQL");
            if (needCompile)
            {
                btnTestCodingProblem.Visible = true;
            }
            else
            {
                btnTestCodingProblem.Visible = false;
            }
        }

        protected void SetGrades_Click(object sender, EventArgs e)
        {
            string expected = TextBoxExpectedOutput.Text.Trim();
            if (expected == "") return;

            string[] expectedLines = expected.Split('\n').ToList().Where(x => x.Replace("\r", "") != "").ToArray();
            string newExpected = "";

            int maxgrade = Convert.ToInt32(TextBoxMaxGrade.Text.Trim());
            if (maxgrade <= 0) maxgrade = 100;
            int lineGrade = maxgrade / expectedLines.Length;
            if (maxgrade % expectedLines.Length > 0) lineGrade++;

            for (int i = 0; i < expectedLines.Length; i++)
            {
                string line = expectedLines[i];

                //Total grade must be maxgrade
                if (i == expectedLines.Length - 1) lineGrade = maxgrade - (lineGrade * i);

                //check if the line has already been assigned a grade
                int dash_index = line.IndexOf('-');
                string newline = "";

                if (dash_index >= 0)
                {
                    try
                    {
                        int number = Int32.Parse(line.Substring(0, dash_index));
                        newline = line.Substring(dash_index + 1).Trim();
                    }
                    catch (FormatException)
                    {
                        newline = line.Trim();
                    }
                }
                else newline = line.Trim();


                newExpected += lineGrade.ToString() + " - " + newline + "\n";
            }

            TextBoxExpectedOutput.Text = newExpected;
        }

        protected (bool, string) variableValidation((string, string) variable)
        {
            string msg = "";

            if (variable.Item1 != "" && variable.Item2 != "")
            {
                string pattern = @".*\$.*|.*\{.*|.*\}.*|^studentid$"; //Not allow variables with $,{,} and "studentid"
                bool nameNotValid = Regex.IsMatch(variable.Item1, pattern, RegexOptions.IgnoreCase);
                if (nameNotValid)
                {
                    msg = "Name " + variable.Item1 + " is not valid";
                    return (false, msg);
                }
                else
                {
                    string[] possiblesValues = Regex.Split(variable.Item2, @"(?<!\/)\,(?![^[]*]|[^{]*})");
                    if (Regex.IsMatch(variable.Item2, "\\["))
                    {
                        foreach (String possiblesValuesItem in possiblesValues)
                        {
                            bool isArray = Regex.IsMatch(possiblesValuesItem, @"^\[([\w]+((,[\w]*)+|([\w]*)+)\]$)|^\{([\w]+((,[\w]*)+|([\w]*)+)\}$)");
                            if (!isArray)
                            {
                                msg = "The variable named " + variable.Item1 + " has a wrongly defined " + possiblesValuesItem;
                                return (false, msg);
                            }
                        }
                        return (true, msg);
                    }
                    else
                    {
                        foreach (String possiblesValuesItem in possiblesValues)
                        {
                            pattern = "\\.\\.";
                            bool isRange = Regex.IsMatch(possiblesValuesItem, pattern);
                            if (isRange)
                            {
                                string[] range = possiblesValuesItem.Trim().Split(new[] { ".." }, StringSplitOptions.RemoveEmptyEntries);
                                if (range.Count() > 1)
                                {
                                    pattern = "\\:";
                                    bool haveColon = Regex.IsMatch(range[1], pattern);
                                    string[] ColInRange = range[1].Trim().Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
                                    if (haveColon && ColInRange.Count() != 2)
                                    {
                                        msg = "The variable named " + variable.Item1.Trim() + " has a wrongly defined range";
                                        return (false, msg);
                                    }
                                }
                                else
                                {
                                    msg = "The variable named " + variable.Item1.Trim() + " has a wrongly defined range";
                                    return (false, msg);
                                }
                            }
                        }
                        return (true, msg);
                    }
                }
            }
            else if (variable.Item1 != "" && variable.Item2 == "")
            {
                msg = "Possible values is required";
                return (false, msg);
            }
            else if (variable.Item1 == "" && variable.Item2 != "")
            {
                msg = "Variable name is required";
                return (false, msg);
            }
            else
            {
                return (true, msg);
            }
        }

        protected void set_StartCode(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(DropDownListLanguage.SelectedValue))
            {
                lblMessage.Text = "Sorry! Operation has been failed. Required Fields: Languague.";
            }
            else
            {
                using (MaterialEntities db = new MaterialEntities())
                {
                    string selectedLenguague = DropDownListLanguage.SelectedValue;
                    Language language = db.Languages.Find(Convert.ToInt32(selectedLenguague));
                    string startendcode = language.CodeStart + "\n" + language.CodeEnd;
                    if (TextBoxScript.Text == "")
                    {
                        IndicateStart.Value = "0";
                    }
                    else
                    {
                        TextBoxScript.Text += " ";
                    }
                    TextBoxScript.Text = TextBoxScript.Text.Insert(Convert.ToInt32(IndicateStart.Value), startendcode);
                }
            }
        }
    }
    public class RunCodeForValidationInput
    {
        public string Instructions { get; set; }
        public string Language { get; set; }
        public string Script { get; set; }
        public string Solution { get; set; }
        public string Before { get; set; }
        public string After { get; set; }
        public string ExpectedOutput { get; set; }
        public string TestCode { get; set; }
        public string ParameterTypes { get; set; }
        public Dictionary<string, string> VarValuePairs { get; set; }
    }
}